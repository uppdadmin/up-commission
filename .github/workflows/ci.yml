name: ci

on:
  push:
    branches:
      - master
      - main
    paths:
      - "documentation/**"
  pull_request:
    branches:
      - master
      - main
    paths:
      - "documentation/**"

concurrency:
  group: ci-deploy
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    # every `run:` below is executed from ./documentation
    defaults:
      run:
        working-directory: documentation

    # STEPS:

    steps:
      # â€”â€”â€”â€”â€” (1) Fullâ€‘depth Checkout (history + tags) â€”â€”â€”â€”â€”
      - name: FULLâ€‘DEPTH CHECKOUT
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # â€”â€”â€”â€”â€” (2) Configure Git credentials â€”â€”â€”â€”â€”
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

      # â€”â€”â€”â€”â€” Set up Python & install deps â€”â€”â€”â€”â€”
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install MkDocsâ€‘Material & Mike
        run: pip install mkdocs-material mike

      # â€”â€”â€”â€”â€” (3) Generate a weekly cache key â€”â€”â€”â€”â€”
      - name: Generate Weekly Cache ID
        run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV

      # â€”â€”â€”â€”â€” (4) Cache MkDocs theme files â€”â€”â€”â€”â€”
      - name: Cache MkDocs theme files
        uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-

      # â€”â€”â€”â€”â€” (5) Detect if ghâ€‘pages branch exists â€”â€”â€”â€”â€”
      - name: Detect if ghâ€‘pages branch exists
        id: check-gh
        run: |
          if git ls-remote --exit-code origin gh-pages; then
            echo "EXISTS=true" >> $GITHUB_ENV
          else
            echo "EXISTS=false" >> $GITHUB_ENV
          fi

      # â€”â€”â€”â€”â€” (6) Capture current commit SHA & inject into docs â€”â€”â€”â€”â€”
      - name: Get commit SHA
        run: echo "SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Inject SHA into docs
        run: |
            sed -i "s/BUILD_SHA_HERE/${SHA}/g" docs/index.md

      # â€”â€”â€”â€”â€” (7) Firstâ€‘time deploy: initialize ghâ€‘pages â€”â€”â€”â€”â€”
      - name: init commit - Deploy MkDocs
        if: env.EXISTS == 'false'
        run: mkdocs gh-deploy --force

      - name: init commit - Create gh-pages branch
        if: env.EXISTS == 'false'
        run: echo "gh-pages created; next docs change will version with Mike."

      # â€”â€”â€”â€”â€” (8) Count docsâ€‘only commits ever â€”â€”â€”â€”â€”
      - name: Count /docs commits
        if: env.EXISTS == 'true'
        id: count
        run: |
          COUNT=$(git log --pretty=format:"%h" -- documentation/ | wc -l | tr -d ' ')
          echo "COUNT=$COUNT" >> $GITHUB_ENV

     # â€”â€”â€”â€”â€” (9) Compute version identifiers (SHA preview) â€”â€”â€”â€”â€”
      - name: Compute Version Identifier
        run: |
          # 1) Get full commit SHA
          FULL_SHA=$(git rev-parse HEAD)

          # 2) Shorten to first 7 characters (GitHub style)
          SHORT_SHA=${FULL_SHA:0:7}
          echo "ðŸ”‘ Deploy version (SHA): $SHORT_SHA"

          # 3) Export for downstream steps
          echo "VERSION=$SHORT_SHA" >> $GITHUB_ENV
          echo "VERSION_LABEL=$SHORT_SHA" >> $GITHUB_ENV


      # â€”â€”â€”â€”â€” (10) Deploy docs with Mike using custom slug & title â€”â€”â€”â€”â€”
      - name: Deploy docs with customSlug & title
        if: env.EXISTS == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mike deploy "${VERSION}" \
            --title "${VERSION_LABEL}" \
            --branch gh-pages --push
          mike set-default "${VERSION}" \
            --branch gh-pages --push

      # â€”â€”â€”â€”â€” (11) Display GitHub Pages URLs â€”â€”â€”â€”â€”
      - name: Display GitHub Pages URLs
        if: env.EXISTS == 'true'
        run: |
          echo "ðŸ“„ GitHub Pages URLs:"
          echo "ðŸ”— Repository site: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          echo "ðŸ”— Current version: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${VERSION}/"
          echo "ðŸ”— Redirect target: https://${{ github.repository_owner }}.github.io/"
          echo "ðŸ“‹ Access your documentation at the repository site URL above"
          echo ""
          echo "ðŸ”„ Available versions:"
          mike list --branch gh-pages || echo "No versions found yet"

      # â€”â€”â€”â€”â€” (12) Override root redirect to your homepage â€”â€”â€”â€”â€”
      - name: Override Root Redirect
        if: env.EXISTS == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const url = `https://${context.repo.owner}.github.io/`;
            const encoded = Buffer.from(`<!DOCTYPE html>
            <html>
              <head><meta http-equiv="refresh" content="0;url=${url}"></head>
              <body></body>
            </html>`).toString('base64');

            // Try to fetch existing file to get its SHA
            let sha;
            try {
              const { data } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'index.html',
                ref: 'gh-pages'
              });
              sha = data.sha;
            } catch {}

            // Create or update the file
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'index.html',
              message: 'Override redirect to homepage',
              content: encoded,
              branch: 'gh-pages',
              sha
            });
